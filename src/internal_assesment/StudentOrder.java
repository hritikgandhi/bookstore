/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package internal_assesment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

/**
 *
 * @author Hritik Gandhi
 */
public class StudentOrder extends javax.swing.JFrame {

    /**
     * Creates new form StudentOrder
     */
    String Name;
    String BID;
    String Price;
    String Qty;
    String Total;
    String SID;
    String Books;
    Connection con;
    Statement st;
    ResultSet rs;
    public StudentOrder() {
        initComponents();
        connect();
        FillCombo1();
        FillCombo2();
    }
public void connect()
    {
       try
       {
       
       con = DriverManager.getConnection("jdbc:ucanaccess://C:\\Users\\Hritik Gandhi\\OneDrive\\Netbeans\\Internal_Assesment\\db1.accdb");       
       st = con.createStatement();
       
       }
       catch(Exception ex)
       {
           textComponent.append("Error Connecting to the Database..."+"\n\r");
       }
    }
    private void FillCombo1()
    {
        int t = 0;
        try
        {
           String sql = "select * from StudentDB";
           rs = st.executeQuery(sql);
           
           while(rs.next())
           {
               t++;
               String name = rs.getString("Student");
               StudentSelector.addItem(name);
           }
            System.out.println("");
        }
        catch(Exception e)
        {
            textComponent.append("Error Filling Combo Box..."+"\n\r");
        }
    }
    private void FillCombo2()
    {
        try
        {
           String sql = "select * from InventoryDB";
           rs = st.executeQuery(sql);
           
           while(rs.next())
           {
               String name = rs.getString("Books");
               BookSelector.addItem(name);
           }
        }
        catch(Exception e)
        {
            textComponent.append("Error Filling Combo Box..."+"\n\r");
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        title = new javax.swing.JLabel();
        namelabel = new javax.swing.JLabel();
        StudentSelector = new javax.swing.JComboBox<>();
        labelBooks = new javax.swing.JLabel();
        BookSelector = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        textComponent = new javax.swing.JTextArea();
        saveButton = new javax.swing.JButton();
        BackButton = new javax.swing.JButton();
        inpQty = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        title.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        title.setText("Place Order");

        namelabel.setText("Select Student:");

        StudentSelector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Select--" }));
        StudentSelector.setToolTipText("");
        StudentSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StudentSelectorActionPerformed(evt);
            }
        });

        labelBooks.setText("Select Books:");

        BookSelector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Select--" }));
        BookSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BookSelectorActionPerformed(evt);
            }
        });

        textComponent.setEditable(false);
        textComponent.setColumns(20);
        textComponent.setRows(5);
        jScrollPane1.setViewportView(textComponent);

        saveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/internal_assesment/save-icon1px.png"))); // NOI18N
        saveButton.setText("Save Invoice");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        BackButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/internal_assesment/back-icon.png"))); // NOI18N
        BackButton.setText("Go Back");
        BackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Qty:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(title, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(StudentSelector, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(BookSelector, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(labelBooks))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel1)
                                        .addComponent(inpQty, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addComponent(namelabel)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BackButton, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(saveButton, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(namelabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(StudentSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelBooks)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(BookSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(inpQty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(saveButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                .addComponent(BackButton)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
      try
        {
           String sql = "select * from StudentDB";
           rs = st.executeQuery(sql);
           
           while(rs.next())
           {
               String name = rs.getString("Student");
               if (Name.equalsIgnoreCase(name))
               {
                  SID = rs.getObject("ID").toString();
               }
           }
        }
        catch(Exception e)
        {
            textComponent.append("Error Getting Values from StudentDB..."+"\n\r");
        }// TODO add your handling code here:
      try
        {
           String sql = "select * from InventoryDB";
           rs = st.executeQuery(sql);
           
           while(rs.next())
           {
               String name = rs.getString("Books");
               if (Books.equalsIgnoreCase(name))
               {
                  BID = rs.getObject("BID").toString();
                  Price = rs.getObject("price").toString();
               }
           }
        }
        catch(Exception e)
        {
            textComponent.append("Error Getting Values from InventoryDB..."+"\n\r");
        }
      
        try
        {
    
        Statement sta;
         sta = con.createStatement(
                 ResultSet.TYPE_FORWARD_ONLY,
                 ResultSet.CONCUR_UPDATABLE);
        ResultSet res;
         res = sta.executeQuery(
                 "SELECT * FROM Invoice WHERE 1=2");


        if (res.getConcurrency() == ResultSet.CONCUR_READ_ONLY)
        {
        textComponent.append("ResultSet non-updatable."+"\n\r");
        } 
        else 
        {
        textComponent.append("ResultSet updatable."+"\n\r");
        }
        res.moveToInsertRow();
           Qty = inpQty.getText().trim();
           int result = Integer.parseInt(Qty);
           int result1 = Integer.parseInt(Price);
           int n = result * result1;
           Total = "" + n;
           ERemdInv.main(Qty,Books);
        res.moveToInsertRow();
        res.updateString("StudentN",Name);
        res.updateString("Book",Books);
        res.updateString("SID",SID);
        res.updateString("BID",BID);
        res.updateString("Price",Price);
        res.updateString("Qty",Qty);
        res.updateString("total",Total);
        res.insertRow();
        res.moveToCurrentRow();
        textComponent.append("Data inserted."+"\n\r");
        res.close();
        sta.close();
   


        }
catch (SQLException | NumberFormatException ex)
{
    System.out.println(ex);
    textComponent.append("An Unexpected Error Has Occoured Please contact IT Support."+"\n\r");
}// TODO add your handling code here:
    }//GEN-LAST:event_saveButtonActionPerformed

    private void BackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackButtonActionPerformed
        MainUI.main();        
        setVisible(false); 
        dispose();             // TODO add your handling code here:
    }//GEN-LAST:event_BackButtonActionPerformed

    private void StudentSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StudentSelectorActionPerformed
     Name = StudentSelector.getSelectedItem().toString();  

    }//GEN-LAST:event_StudentSelectorActionPerformed

    private void BookSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BookSelectorActionPerformed
     Books = BookSelector.getSelectedItem().toString(); 
     // TODO add your handling code here:
    }//GEN-LAST:event_BookSelectorActionPerformed

    public static void main() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StudentOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StudentOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StudentOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StudentOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new StudentOrder().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BackButton;
    private javax.swing.JComboBox<String> BookSelector;
    private javax.swing.JComboBox<String> StudentSelector;
    private javax.swing.JTextField inpQty;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelBooks;
    private javax.swing.JLabel namelabel;
    private javax.swing.JButton saveButton;
    private javax.swing.JTextArea textComponent;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables
}
